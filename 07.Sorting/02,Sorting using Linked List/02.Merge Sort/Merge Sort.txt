#include <stdio.h>
#include <stdlib.h>
struct Node {
    int data;
    struct Node* next;
};
struct Node* SortedMerge(struct Node* a, struct Node* b);
void middle(struct Node* source,struct Node** frontRef, struct Node** backRef);
void MergeSort(struct Node** headRef){
    struct Node* head = *headRef;
    struct Node* a;
    struct Node* b;
    if ((head == NULL) || (head->next == NULL)) {
        return;
    }
    middle(head, &a, &b);
    MergeSort(&a);
    MergeSort(&b);
    *headRef = SortedMerge(a, b);
}
struct Node* SortedMerge(struct Node* a, struct Node* b)
{
    struct Node* result = NULL;
    if (a == NULL)
        return (b);
    else if (b == NULL)
        return (a);
    if (a->data <= b->data) {
        result = a;
        result->next = SortedMerge(a->next, b);
    }
    else {
        result = b;
        result->next = SortedMerge(a, b->next);
    }
    return (result);
}
void middle(struct Node* source,struct Node** frontRef, struct Node** backRef)
{
    struct Node* fast;
    struct Node* slow;
    slow = source;
    fast = source->next;
    while (fast != NULL) {
        fast = fast->next;
        if (fast != NULL) {
            slow = slow->next;
            fast = fast->next;
        }
    }
    *frontRef = source;
    *backRef = slow->next;
    slow->next = NULL;
}
void printList(struct Node* node){
    while (node != NULL) {
        printf("%d ", node->data);
        node = node->next;
    }
}
void push(struct Node** head_ref, int new_data)
{
    struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
    new_node->data = new_data;
    new_node->next = (*head_ref);
    (*head_ref) = new_node;
}
int main()
{
    int data,i,n;
    struct Node* res = NULL;
    struct Node* a = NULL;
     printf("how many elements you want to store in your linked list\n");
    scanf("%d",&n);
   for(int i=0;i<n;i++)
   {
      printf("please enter your data No-%d ",i+1);
      scanf("%d",&data);
      push( &a, data);
      printf("\n");
   }  
    printf("Linked List before sorting: \n");
    printList(a);
    printf("\n");
    MergeSort(&a);
    printf("Linked List after Sorting: \n");
    printList(a);
    getchar();
    return 0;
}
